import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
import random

class PartCounter:
    def __init__(self, simtime, samples):
        self.simtime = simtime 
        self.samples = samples
        self.t = np.linspace(0,self.simtime,self.samples)
        self.y = np.zeros(len(self.t))
        self.rolling_counter = 0
        self.part_count = 0
        self.duplicate_check = False
    

    def simulate(self):
        for i in range(len(self.t)):
            if (i > 10 and i < 50) or (i > 80 and i < 120):
                self.y[i] = random.randint(6, 10)
            else:
                self.y[i] = random.randint(1, 4)

            self.update_part_count(self.y[i])
    
    def update_part_count(self, value):
        if value >= 5:
            self.rolling_counter += 1
        elif value < 5 and self.rolling_counter != 0:
            self.rolling_counter = 0
            self.duplicate_check = False #part is done, enable part counting again

        if self.rolling_counter >= 10 and not self.duplicate_check:
            self.part_count += 1
            self.rolling_counter = 0
            self.duplicate_check = True
    
    def plot_data(self):
        fig, axis = plt.subplots()
        axis.set_xlim([min(self.t), max(self.t)])
        axis.set_ylim(0, (max(self.y) + 1))
        line, = axis.plot([], []) 
        axis.hlines(5, min(self.t), max(self.t), color="red") 

        def animate(frame):
            line.set_data(self.t[:frame], self.y[:frame])
            return line,  

        animation = FuncAnimation(fig, animate, frames=len(self.t), interval=10, repeat=False)
        print("parts counted =", self.part_count)
        plt.show()

sim1 = PartCounter(10,150)
sim1.simulate()
sim1.plot_data()

#Next idea: 
#Grab a portion of the plotdata_fft array, check if ~95% of the values in the range corresponding to our target frequency range are above the amplitude threshold, increment rolling_counter if so
def majorityCounting(simtime):
    rolling_counter = 0
    part_count = 0
    duplicate_check = False
    plotdata_fft = np.zeros(500) # our target frequency range will probably be 4750-5250Hz if being lenient - 50 range here as a smaller simulation

    for i in range(simtime):
        for i in range (len(plotdata_fft)):
            plotdata_fft[i] = random.randint(5,10) #instead of one random number per instance, now an array of random numbers per instance 
        target_avg = np.mean(plotdata_fft[350:400])   #calculate mean value of the target range
        print(target_avg)

        if target_avg >= 6:     # same checks as before but now on the average of our target range
            rolling_counter += 1

        elif target_avg < 5 and rolling_counter != 0:
            rolling_counter = 0
            duplicate_check = False #part is done, enable part counting again

        if rolling_counter >= 10 and not duplicate_check:
            part_count += 1
            rolling_counter = 0
            duplicate_check = True
    
    return print("parts counted = ", part_count)

majorityCounting(10)


#Still need to tie this to interval time & actual sample rate

#The "Interval" is the common factor between this artificial plot and the real one that will make it transferable (I hope)

